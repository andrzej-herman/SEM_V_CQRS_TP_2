@inject IJSRuntime JS
@inject IQuizService Quiz
@page "/question"


<style>
    .answer {
    width: 400px;
    min-width: 400px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px;
    padding: 10px;
    background-color: lightskyblue;
    border-radius: 5px;
    color: #000;
    cursor: pointer;
    transition: all ease-in-out 0.5s;
    }

    .answer:hover {
    background-color: blue;
    color: #fff;
    }
</style>

@if(isLoading)
{
    <h3>Pobieranie pytania ...</h3>
}

@if (currentQuestion != null && !isLoading)
{
    <h4>Pytanie za @currentQuestion.Category pkt</h4>
    <h3>@currentQuestion.Content</h3>
    <div class="no-wrap width:880px; display:flex; align-items:center; justify-content:center; flex-wrap:">
        @foreach (var answer in currentQuestion.Answers!)
        {
            <div class="answer" @onclick="() => CheckAnswer(answer.AnswerId)" >@answer.Content</div>
        }
    </div>
}


@code {
    protected int currentCategory;
    protected QuestionDto? currentQuestion;
    protected bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;       
        await GetQuestion();
    }

    protected async Task GetQuestion()
    {
        isLoading = true;
        currentCategory = int.Parse(await JS.InvokeAsync<string>("localStorage.getItem", Cookies.COOKIE));
        currentQuestion = await Quiz.GetQuestion(currentCategory);
        isLoading = false;
        StateHasChanged();
    }

    protected async Task CheckAnswer(Guid answerId)
    {

    }
}
